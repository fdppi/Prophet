#ifndef DECODE_H
#define DECODE_H

//
// Micro-operations (uops):
//
enum {
    OP_nop,
    OP_mov,
    // Logical
    OP_and,
    OP_andnot,
    OP_xor,
    OP_or,
    OP_nand,
    OP_ornot,
    OP_eqv,
    OP_nor,
    // Mask, insert or extract bytes
    OP_maskb,
    // Add and subtract
    OP_add,
    OP_sub,
    OP_adda,
    OP_suba,
    OP_addm,
    OP_subm,
    // Condition code logical ops
    OP_andcc,
    OP_orcc,
    OP_xorcc,
    OP_ornotcc,
    // Condition code movement and merging
    OP_movccr,
    OP_movrcc,
    OP_collcc,
    // Simple shifting (restricted to small immediate 1..8)
    OP_shls,
    OP_shrs,
    OP_bswap,
    OP_sars,
    // Bit testing
    OP_bt,
    OP_bts,
    OP_btr,
    OP_btc,
    // Set and select
    OP_set,
    OP_set_sub,
    OP_set_and,
    OP_sel,
    OP_sel_cmp,
    // Branches
    OP_br,
    OP_br_sub,
    OP_br_and,
    OP_jmp,
    OP_bru,
    OP_jmpp,
    OP_brp,
    // Checks
    OP_chk,
    OP_chk_sub,
    OP_chk_and,
    // Loads and stores
    OP_ld,
    OP_ldx,
    OP_ld_pre,
    OP_st,
    OP_mf,
    // Shifts, rotates and complex masking
    OP_shl,
    OP_shr,
    OP_mask,
    OP_sar,
    OP_rotl,
    OP_rotr,
    OP_rotcl,
    OP_rotcr,
    // Multiplication
    OP_mull,
    OP_mulh,
    OP_mulhu,
    OP_mulhl,
    // Bit scans
    OP_ctz,
    OP_clz,
    OP_ctpop,
    OP_permb,
    // Integer divide and remainder step
    OP_div,
    OP_rem,
    OP_divs,
    OP_rems,
    // Minimum and maximum
    OP_min,
    OP_max,
    OP_min_s,
    OP_max_s,
    // Floating point
    OP_fadd,
    OP_fsub,
    OP_fmul,
    OP_fmadd,
    OP_fmsub,
    OP_fmsubr,
    OP_fdiv,
    OP_fsqrt,
    OP_frcp,
    OP_frsqrt,
    OP_fmin,
    OP_fmax,
    OP_fcmp,
    OP_fcmpcc,
    OP_fcvt_i2s_ins,
    OP_fcvt_i2s_p,
    OP_fcvt_i2d_lo,
    OP_fcvt_i2d_hi,
    OP_fcvt_q2s_ins,
    OP_fcvt_q2d,
    OP_fcvt_s2i,
    OP_fcvt_s2q,
    OP_fcvt_s2i_p,
    OP_fcvt_d2i,
    OP_fcvt_d2q,
    OP_fcvt_d2i_p,
    OP_fcvt_d2s_ins,
    OP_fcvt_d2s_p,
    OP_fcvt_s2d_lo,
    OP_fcvt_s2d_hi,
    // Vector integer uops
    // size defines element size: 00 = byte, 01 = W1 10 = W3 11 = W64 (same as normal ops)
    OP_vadd,
    OP_vsub,
    OP_vadd_us,
    OP_vsub_us,
    OP_vadd_ss,
    OP_vsub_ss,
    OP_vshl,
    OP_vshr,
    OP_vbt, // bit test vector (e.g. pack bit 7 of 8 bytes into 8-bit output, for pmovmskb)
    OP_vsar,
    OP_vavg,
    OP_vcmp,
    OP_vmin,
    OP_vmax,
    OP_vmin_s,
    OP_vmax_s,
    OP_vmull,
    OP_vmulh,
    OP_vmulhu,
    OP_vmaddp,
    OP_vsad,
    OP_vpack_us,
    OP_vpack_ss,
    OP_MAX_OPCODE,
};

#define MAX_UOPS_NUM 16

typedef struct {
    uint8_t num;
    uint8_t uops[MAX_UOPS_NUM];
} uops_info_t;

#define MAX_TABLE_NUM 512

static const uops_info_t uops_map_table[MAX_TABLE_NUM] = 
{
    /* 0x00 */ {0, {}}, 
    /* 0x01 */ {3, {OP_ld, OP_add, OP_st}}, 
    /* 0x02 */ {0, {}}, 
    /* 0x03 */ {0, {}}, 
    /* 0x04 */ {0, {}}, 
    /* 0x05 */ {0, {}}, 
    /* 0x06 */ {0, {}}, 
    /* 0x07 */ {0, {}}, 
    /* 0x08 */ {0, {}}, 
    /* 0x09 */ {0, {}}, 
    /* 0x0A */ {0, {}}, 
    /* 0x0B */ {0, {}}, 
    /* 0x0C */ {0, {}}, 
    /* 0x0D */ {0, {}}, 
    /* 0x0E */ {0, {}}, 
    /* 0x0F */ {0, {}}, 
    /* 0x10 */ {0, {}}, 
    /* 0x11 */ {0, {}}, 
    /* 0x12 */ {0, {}}, 
    /* 0x13 */ {0, {}}, 
    /* 0x14 */ {0, {}}, 
    /* 0x15 */ {0, {}}, 
    /* 0x16 */ {0, {}}, 
    /* 0x17 */ {0, {}}, 
    /* 0x18 */ {0, {}}, 
    /* 0x19 */ {0, {}}, 
    /* 0x1A */ {0, {}}, 
    /* 0x1B */ {0, {}}, 
    /* 0x1C */ {0, {}}, 
    /* 0x1D */ {0, {}}, 
    /* 0x1E */ {0, {}}, 
    /* 0x1F */ {0, {}}, 
    /* 0x20 */ {0, {}}, 
    /* 0x21 */ {0, {}}, 
    /* 0x22 */ {0, {}}, 
    /* 0x23 */ {0, {}}, 
    /* 0x24 */ {0, {}}, 
    /* 0x25 */ {0, {}}, 
    /* 0x26 */ {0, {}}, 
    /* 0x27 */ {0, {}}, 
    /* 0x28 */ {0, {}}, 
    /* 0x29 */ {1, {OP_sub}}, 
    /* 0x2A */ {0, {}}, 
    /* 0x2B */ {0, {}}, 
    /* 0x2C */ {0, {}}, 
    /* 0x2D */ {0, {}}, 
    /* 0x2E */ {0, {}}, 
    /* 0x2F */ {0, {}}, 
    /* 0x30 */ {0, {}}, 
    /* 0x31 */ {0, {}}, 
    /* 0x32 */ {0, {}}, 
    /* 0x33 */ {0, {}}, 
    /* 0x34 */ {0, {}}, 
    /* 0x35 */ {0, {}}, 
    /* 0x36 */ {0, {}}, 
    /* 0x37 */ {0, {}}, 
    /* 0x38 */ {0, {}}, 
    /* 0x39 */ {0, {}}, 
    /* 0x3A */ {0, {}}, 
    /* 0x3B */ {0, {}}, 
    /* 0x3C */ {0, {}}, 
    /* 0x3D */ {0, {}}, 
    /* 0x3E */ {0, {}}, 
    /* 0x3F */ {0, {}}, 
    /* 0x40 */ {0, {}}, 
    /* 0x41 */ {0, {}}, 
    /* 0x42 */ {0, {}}, 
    /* 0x43 */ {0, {}}, 
    /* 0x44 */ {0, {}}, 
    /* 0x45 */ {0, {}}, 
    /* 0x46 */ {0, {}}, 
    /* 0x47 */ {0, {}}, 
    /* 0x48 */ {0, {}}, 
    /* 0x49 */ {0, {}}, 
    /* 0x4A */ {0, {}}, 
    /* 0x4B */ {0, {}}, 
    /* 0x4C */ {0, {}}, 
    /* 0x4D */ {0, {}}, 
    /* 0x4E */ {0, {}}, 
    /* 0x4F */ {0, {}}, 
    /* 0x50 */ {0, {}}, 
    /* 0x51 */ {0, {}}, 
    /* 0x52 */ {0, {}}, 
    /* 0x53 */ {0, {}}, 
    /* 0x54 */ {0, {}}, 
    /* 0x55 */ {2, {OP_st, OP_sub}}, 
    /* 0x56 */ {0, {}}, 
    /* 0x57 */ {0, {}}, 
    /* 0x58 */ {0, {}}, 
    /* 0x59 */ {0, {}}, 
    /* 0x5A */ {0, {}}, 
    /* 0x5B */ {0, {}}, 
    /* 0x5C */ {0, {}}, 
    /* 0x5D */ {0, {}}, 
    /* 0x5E */ {0, {}}, 
    /* 0x5F */ {0, {}}, 
    /* 0x60 */ {0, {}}, 
    /* 0x61 */ {0, {}}, 
    /* 0x62 */ {0, {}}, 
    /* 0x63 */ {0, {}}, 
    /* 0x64 */ {0, {}}, 
    /* 0x65 */ {0, {}}, 
    /* 0x66 */ {0, {}}, 
    /* 0x67 */ {0, {}}, 
    /* 0x68 */ {3, {OP_mov, OP_st, OP_sub}}, 
    /* 0x69 */ {0, {}}, 
    /* 0x6A */ {0, {}}, 
    /* 0x6B */ {0, {}}, 
    /* 0x6C */ {0, {}}, 
    /* 0x6D */ {0, {}}, 
    /* 0x6E */ {0, {}}, 
    /* 0x6F */ {0, {}}, 
    /* 0x70 */ {0, {}}, 
    /* 0x71 */ {0, {}}, 
    /* 0x72 */ {0, {}}, 
    /* 0x73 */ {0, {}}, 
    /* 0x74 */ {0, {}}, 
    /* 0x75 */ {0, {}}, 
    /* 0x76 */ {0, {}}, 
    /* 0x77 */ {0, {}}, 
    /* 0x78 */ {0, {}}, 
    /* 0x79 */ {0, {}}, 
    /* 0x7A */ {0, {}}, 
    /* 0x7B */ {0, {}}, 
    /* 0x7C */ {0, {}}, 
    /* 0x7D */ {0, {}}, 
    /* 0x7E */ {1, {OP_br}}, 
    /* 0x7F */ {0, {}}, 
    /* 0x80 */ {0, {}}, 
    /* 0x81 */ {1, {OP_sub}}, 
    /* 0x82 */ {0, {}}, 
    /* 0x83 */ {3, {OP_ld, OP_add, OP_st}}, 
    /* 0x84 */ {0, {}}, 
    /* 0x85 */ {1, {OP_and}}, 
    /* 0x86 */ {0, {}}, 
    /* 0x87 */ {0, {}}, 
    /* 0x88 */ {0, {}}, 
    /* 0x89 */ {2, {OP_mov, OP_st}}, 
    /* 0x8A */ {0, {}}, 
    /* 0x8B */ {3, {OP_ld, OP_add, OP_ld}}, 
    /* 0x8C */ {0, {}}, 
    /* 0x8D */ {3, {OP_adda, OP_add, OP_st}}, 
    /* 0x8E */ {0, {}}, 
    /* 0x8F */ {0, {}}, 
    /* 0x90 */ {0, {}}, 
    /* 0x91 */ {0, {}}, 
    /* 0x92 */ {0, {}}, 
    /* 0x93 */ {0, {}}, 
    /* 0x94 */ {0, {}}, 
    /* 0x95 */ {0, {}}, 
    /* 0x96 */ {0, {}}, 
    /* 0x97 */ {0, {}}, 
    /* 0x98 */ {0, {}}, 
    /* 0x99 */ {0, {}}, 
    /* 0x9A */ {0, {}}, 
    /* 0x9B */ {0, {}}, 
    /* 0x9C */ {0, {}}, 
    /* 0x9D */ {0, {}}, 
    /* 0x9E */ {0, {}}, 
    /* 0x9F */ {0, {}}, 
    /* 0xA0 */ {0, {}}, 
    /* 0xA1 */ {0, {}}, 
    /* 0xA2 */ {0, {}}, 
    /* 0xA3 */ {0, {}}, 
    /* 0xA4 */ {0, {}}, 
    /* 0xA5 */ {0, {}}, 
    /* 0xA6 */ {0, {}}, 
    /* 0xA7 */ {0, {}}, 
    /* 0xA8 */ {0, {}}, 
    /* 0xA9 */ {0, {}}, 
    /* 0xAA */ {0, {}}, 
    /* 0xAB */ {0, {}}, 
    /* 0xAC */ {0, {}}, 
    /* 0xAD */ {0, {}}, 
    /* 0xAE */ {0, {}}, 
    /* 0xAF */ {0, {}}, 
    /* 0xB0 */ {0, {}}, 
    /* 0xB1 */ {0, {}}, 
    /* 0xB2 */ {0, {}}, 
    /* 0xB3 */ {0, {}}, 
    /* 0xB4 */ {0, {}}, 
    /* 0xB5 */ {0, {}}, 
    /* 0xB6 */ {0, {}}, 
    /* 0xB7 */ {0, {}}, 
    /* 0xB8 */ {1, {OP_mov}}, 
    /* 0xB9 */ {0, {}}, 
    /* 0xBA */ {0, {}}, 
    /* 0xBB */ {0, {}}, 
    /* 0xBC */ {0, {}}, 
    /* 0xBD */ {0, {}}, 
    /* 0xBE */ {0, {}}, 
    /* 0xBF */ {0, {}}, 
    /* 0xC0 */ {0, {}}, 
    /* 0xC1 */ {0, {}}, 
    /* 0xC2 */ {0, {}}, 
    /* 0xC3 */ {0, {}}, 
    /* 0xC4 */ {0, {}}, 
    /* 0xC5 */ {0, {}}, 
    /* 0xC6 */ {0, {}}, 
    /* 0xC7 */ {2, {OP_mov, OP_st}}, 
    /* 0xC8 */ {0, {}}, 
    /* 0xC9 */ {0, {}}, 
    /* 0xCA */ {0, {}}, 
    /* 0xCB */ {0, {}}, 
    /* 0xCC */ {0, {}}, 
    /* 0xCD */ {0, {}}, 
    /* 0xCE */ {0, {}}, 
    /* 0xCF */ {0, {}}, 
    /* 0xD0 */ {0, {}}, 
    /* 0xD1 */ {0, {}}, 
    /* 0xD2 */ {0, {}}, 
    /* 0xD3 */ {0, {}}, 
    /* 0xD4 */ {0, {}}, 
    /* 0xD5 */ {0, {}}, 
    /* 0xD6 */ {0, {}}, 
    /* 0xD7 */ {0, {}}, 
    /* 0xD8 */ {0, {}}, 
    /* 0xD9 */ {0, {}}, 
    /* 0xDA */ {0, {}}, 
    /* 0xDB */ {0, {}}, 
    /* 0xDC */ {0, {}}, 
    /* 0xDD */ {0, {}}, 
    /* 0xDE */ {0, {}}, 
    /* 0xDF */ {0, {}}, 
    /* 0xE0 */ {0, {}}, 
    /* 0xE1 */ {0, {}}, 
    /* 0xE2 */ {0, {}}, 
    /* 0xE3 */ {0, {}}, 
    /* 0xE4 */ {0, {}}, 
    /* 0xE5 */ {0, {}}, 
    /* 0xE6 */ {0, {}}, 
    /* 0xE7 */ {0, {}}, 
    /* 0xE8 */ {5, {OP_add, OP_st, OP_sub, OP_collcc, OP_bru}}, 
    /* 0xE9 */ {2, {OP_collcc, OP_bru}}, 
    /* 0xEA */ {0, {}}, 
    /* 0xEB */ {2, {OP_collcc, OP_bru}}, 
    /* 0xEC */ {0, {}}, 
    /* 0xED */ {0, {}}, 
    /* 0xEE */ {0, {}}, 
    /* 0xEF */ {0, {}}, 
    /* 0xF0 */ {0, {}}, 
    /* 0xF1 */ {0, {}}, 
    /* 0xF2 */ {0, {}}, 
    /* 0xF3 */ {0, {}}, 
    /* 0xF4 */ {0, {}}, 
    /* 0xF5 */ {0, {}}, 
    /* 0xF6 */ {0, {}}, 
    /* 0xF7 */ {0, {}}, 
    /* 0xF8 */ {0, {}}, 
    /* 0xF9 */ {0, {}}, 
    /* 0xFA */ {0, {}}, 
    /* 0xFB */ {0, {}}, 
    /* 0xFC */ {0, {}}, 
    /* 0xFD */ {0, {}}, 
    /* 0xFE */ {0, {}}, 
    /* 0xFF */ {4, {OP_collcc, OP_add, OP_ld, OP_jmp}}, 

    /* 0x100 */ {0, {}}, 
    /* 0x101 */ {0, {}}, 
    /* 0x102 */ {0, {}}, 
    /* 0x103 */ {0, {}}, 
    /* 0x104 */ {0, {}}, 
    /* 0x105 */ {0, {}}, 
    /* 0x106 */ {0, {}}, 
    /* 0x107 */ {0, {}}, 
    /* 0x108 */ {0, {}}, 
    /* 0x109 */ {0, {}}, 
    /* 0x10A */ {0, {}}, 
    /* 0x10B */ {0, {}}, 
    /* 0x10C */ {0, {}}, 
    /* 0x10D */ {0, {}}, 
    /* 0x10E */ {0, {}}, 
    /* 0x10F */ {0, {}}, 
    /* 0x110 */ {0, {}}, 
    /* 0x111 */ {0, {}}, 
    /* 0x112 */ {0, {}}, 
    /* 0x113 */ {0, {}}, 
    /* 0x114 */ {0, {}}, 
    /* 0x115 */ {0, {}}, 
    /* 0x116 */ {0, {}}, 
    /* 0x117 */ {0, {}}, 
    /* 0x118 */ {0, {}}, 
    /* 0x119 */ {0, {}}, 
    /* 0x11A */ {0, {}}, 
    /* 0x11B */ {0, {}}, 
    /* 0x11C */ {0, {}}, 
    /* 0x11D */ {0, {}}, 
    /* 0x11E */ {0, {}}, 
    /* 0x11F */ {0, {}}, 
    /* 0x120 */ {0, {}}, 
    /* 0x121 */ {0, {}}, 
    /* 0x122 */ {0, {}}, 
    /* 0x123 */ {0, {}}, 
    /* 0x124 */ {0, {}}, 
    /* 0x125 */ {0, {}}, 
    /* 0x126 */ {0, {}}, 
    /* 0x127 */ {0, {}}, 
    /* 0x128 */ {0, {}}, 
    /* 0x129 */ {0, {}}, 
    /* 0x12A */ {0, {}}, 
    /* 0x12B */ {0, {}}, 
    /* 0x12C */ {0, {}}, 
    /* 0x12D */ {0, {}}, 
    /* 0x12E */ {0, {}}, 
    /* 0x12F */ {0, {}}, 
    /* 0x130 */ {0, {}}, 
    /* 0x131 */ {0, {}}, 
    /* 0x132 */ {0, {}}, 
    /* 0x133 */ {0, {}}, 
    /* 0x134 */ {0, {}}, 
    /* 0x135 */ {0, {}}, 
    /* 0x136 */ {0, {}}, 
    /* 0x137 */ {0, {}}, 
    /* 0x138 */ {0, {}}, 
    /* 0x139 */ {0, {}}, 
    /* 0x13A */ {0, {}}, 
    /* 0x13B */ {0, {}}, 
    /* 0x13C */ {0, {}}, 
    /* 0x13D */ {0, {}}, 
    /* 0x13E */ {0, {}}, 
    /* 0x13F */ {0, {}}, 
    /* 0x140 */ {0, {}}, 
    /* 0x141 */ {0, {}}, 
    /* 0x142 */ {0, {}}, 
    /* 0x143 */ {0, {}}, 
    /* 0x144 */ {0, {}}, 
    /* 0x145 */ {0, {}}, 
    /* 0x146 */ {0, {}}, 
    /* 0x147 */ {0, {}}, 
    /* 0x148 */ {0, {}}, 
    /* 0x149 */ {0, {}}, 
    /* 0x14A */ {0, {}}, 
    /* 0x14B */ {0, {}}, 
    /* 0x14C */ {0, {}}, 
    /* 0x14D */ {0, {}}, 
    /* 0x14E */ {0, {}}, 
    /* 0x14F */ {0, {}}, 
    /* 0x150 */ {0, {}}, 
    /* 0x151 */ {0, {}}, 
    /* 0x152 */ {0, {}}, 
    /* 0x153 */ {0, {}}, 
    /* 0x154 */ {0, {}}, 
    /* 0x155 */ {0, {}}, 
    /* 0x156 */ {0, {}}, 
    /* 0x157 */ {0, {}}, 
    /* 0x158 */ {0, {}}, 
    /* 0x159 */ {0, {}}, 
    /* 0x15A */ {0, {}}, 
    /* 0x15B */ {0, {}}, 
    /* 0x15C */ {0, {}}, 
    /* 0x15D */ {0, {}}, 
    /* 0x15E */ {0, {}}, 
    /* 0x15F */ {0, {}}, 
    /* 0x160 */ {0, {}}, 
    /* 0x161 */ {0, {}}, 
    /* 0x162 */ {0, {}}, 
    /* 0x163 */ {0, {}}, 
    /* 0x164 */ {0, {}}, 
    /* 0x165 */ {0, {}}, 
    /* 0x166 */ {0, {}}, 
    /* 0x167 */ {0, {}}, 
    /* 0x168 */ {0, {}}, 
    /* 0x169 */ {0, {}}, 
    /* 0x16A */ {0, {}}, 
    /* 0x16B */ {0, {}}, 
    /* 0x16C */ {0, {}}, 
    /* 0x16D */ {0, {}}, 
    /* 0x16E */ {0, {}}, 
    /* 0x16F */ {0, {}}, 
    /* 0x170 */ {0, {}}, 
    /* 0x171 */ {0, {}}, 
    /* 0x172 */ {0, {}}, 
    /* 0x173 */ {0, {}}, 
    /* 0x174 */ {0, {}}, 
    /* 0x175 */ {0, {}}, 
    /* 0x176 */ {0, {}}, 
    /* 0x177 */ {0, {}}, 
    /* 0x178 */ {0, {}}, 
    /* 0x179 */ {0, {}}, 
    /* 0x17A */ {0, {}}, 
    /* 0x17B */ {0, {}}, 
    /* 0x17C */ {0, {}}, 
    /* 0x17D */ {0, {}}, 
    /* 0x17E */ {0, {}}, 
    /* 0x17F */ {0, {}}, 
    /* 0x180 */ {0, {}}, 
    /* 0x181 */ {0, {}}, 
    /* 0x182 */ {0, {}}, 
    /* 0x183 */ {0, {}}, 
    /* 0x184 */ {0, {}}, 
    /* 0x185 */ {1, {OP_br}}, 
    /* 0x186 */ {0, {}}, 
    /* 0x187 */ {0, {}}, 
    /* 0x188 */ {0, {}}, 
    /* 0x189 */ {0, {}}, 
    /* 0x18A */ {0, {}}, 
    /* 0x18B */ {0, {}}, 
    /* 0x18C */ {0, {}}, 
    /* 0x18D */ {0, {}}, 
    /* 0x18E */ {0, {}}, 
    /* 0x18F */ {0, {}}, 
    /* 0x190 */ {0, {}}, 
    /* 0x191 */ {0, {}}, 
    /* 0x192 */ {0, {}}, 
    /* 0x193 */ {0, {}}, 
    /* 0x194 */ {0, {}}, 
    /* 0x195 */ {0, {}}, 
    /* 0x196 */ {0, {}}, 
    /* 0x197 */ {0, {}}, 
    /* 0x198 */ {0, {}}, 
    /* 0x199 */ {0, {}}, 
    /* 0x19A */ {0, {}}, 
    /* 0x19B */ {0, {}}, 
    /* 0x19C */ {0, {}}, 
    /* 0x19D */ {0, {}}, 
    /* 0x19E */ {0, {}}, 
    /* 0x19F */ {0, {}}, 
    /* 0x1A0 */ {0, {}}, 
    /* 0x1A1 */ {0, {}}, 
    /* 0x1A2 */ {0, {}}, 
    /* 0x1A3 */ {0, {}}, 
    /* 0x1A4 */ {0, {}}, 
    /* 0x1A5 */ {0, {}}, 
    /* 0x1A6 */ {0, {}}, 
    /* 0x1A7 */ {0, {}}, 
    /* 0x1A8 */ {0, {}}, 
    /* 0x1A9 */ {0, {}}, 
    /* 0x1AA */ {0, {}}, 
    /* 0x1AB */ {0, {}}, 
    /* 0x1AC */ {0, {}}, 
    /* 0x1AD */ {0, {}}, 
    /* 0x1AE */ {0, {}}, 
    /* 0x1AF */ {0, {}}, 
    /* 0x1B0 */ {0, {}}, 
    /* 0x1B1 */ {0, {}}, 
    /* 0x1B2 */ {0, {}}, 
    /* 0x1B3 */ {0, {}}, 
    /* 0x1B4 */ {0, {}}, 
    /* 0x1B5 */ {0, {}}, 
    /* 0x1B6 */ {1, {OP_st}}, 
    /* 0x1B7 */ {0, {}}, 
    /* 0x1B8 */ {0, {}}, 
    /* 0x1B9 */ {0, {}}, 
    /* 0x1BA */ {0, {}}, 
    /* 0x1BB */ {0, {}}, 
    /* 0x1BC */ {0, {}}, 
    /* 0x1BD */ {0, {}}, 
    /* 0x1BE */ {0, {}}, 
    /* 0x1BF */ {0, {}}, 
    /* 0x1C0 */ {0, {}}, 
    /* 0x1C1 */ {0, {}}, 
    /* 0x1C2 */ {0, {}}, 
    /* 0x1C3 */ {0, {}}, 
    /* 0x1C4 */ {0, {}}, 
    /* 0x1C5 */ {0, {}}, 
    /* 0x1C6 */ {0, {}}, 
    /* 0x1C7 */ {0, {}}, 
    /* 0x1C8 */ {0, {}}, 
    /* 0x1C9 */ {0, {}}, 
    /* 0x1CA */ {0, {}}, 
    /* 0x1CB */ {0, {}}, 
    /* 0x1CC */ {0, {}}, 
    /* 0x1CD */ {0, {}}, 
    /* 0x1CE */ {0, {}}, 
    /* 0x1CF */ {0, {}}, 
    /* 0x1D0 */ {0, {}}, 
    /* 0x1D1 */ {0, {}}, 
    /* 0x1D2 */ {0, {}}, 
    /* 0x1D3 */ {0, {}}, 
    /* 0x1D4 */ {0, {}}, 
    /* 0x1D5 */ {0, {}}, 
    /* 0x1D6 */ {0, {}}, 
    /* 0x1D7 */ {0, {}}, 
    /* 0x1D8 */ {0, {}}, 
    /* 0x1D9 */ {0, {}}, 
    /* 0x1DA */ {0, {}}, 
    /* 0x1DB */ {0, {}}, 
    /* 0x1DC */ {0, {}}, 
    /* 0x1DD */ {0, {}}, 
    /* 0x1DE */ {0, {}}, 
    /* 0x1DF */ {0, {}}, 
    /* 0x1E0 */ {0, {}}, 
    /* 0x1E1 */ {0, {}}, 
    /* 0x1E2 */ {0, {}}, 
    /* 0x1E3 */ {0, {}}, 
    /* 0x1E4 */ {0, {}}, 
    /* 0x1E5 */ {0, {}}, 
    /* 0x1E6 */ {0, {}}, 
    /* 0x1E7 */ {0, {}}, 
    /* 0x1E8 */ {0, {}}, 
    /* 0x1E9 */ {0, {}}, 
    /* 0x1EA */ {0, {}}, 
    /* 0x1EB */ {0, {}}, 
    /* 0x1EC */ {0, {}}, 
    /* 0x1ED */ {0, {}}, 
    /* 0x1EE */ {0, {}}, 
    /* 0x1EF */ {0, {}}, 
    /* 0x1F0 */ {0, {}}, 
    /* 0x1F1 */ {0, {}}, 
    /* 0x1F2 */ {0, {}}, 
    /* 0x1F3 */ {0, {}}, 
    /* 0x1F4 */ {0, {}}, 
    /* 0x1F5 */ {0, {}}, 
    /* 0x1F6 */ {0, {}}, 
    /* 0x1F7 */ {0, {}}, 
    /* 0x1F8 */ {0, {}}, 
    /* 0x1F9 */ {0, {}}, 
    /* 0x1FA */ {0, {}}, 
    /* 0x1FB */ {0, {}}, 
    /* 0x1FC */ {0, {}}, 
    /* 0x1FD */ {0, {}}, 
    /* 0x1FE */ {0, {}}, 
    /* 0x1FF */ {0, {}}, 
};

//
// Uop to functional unit mappings
//
typedef struct {
    uint8_t opcode;
    uint16_t  fu;
} func_info_t;

#if 0

enum {
    FU_ALU1       = (1 << 0),
    FU_ALUC       = (1 << 1),
    FU_ALU2       = (1 << 2),
    FU_LSU1       = (1 << 3),
    FU_ALU3       = (1 << 4),
    FU_LSU2       = (1 << 5),
    FU_FADD       = (1 << 6),
    FU_FMUL       = (1 << 7),
    FU_FCVT       = (1 << 8),
};

#define ANYALU FU_ALU1|FU_ALU2|FU_ALU3|FU_ALUC
#define ANYFPU FU_FADD|FU_FMUL|FU_FCVT

const func_info_t func_map_table[OP_MAX_OPCODE] = {
    {OP_nop,             FU_ALU1|FU_ALU2|FU_ALU3|FU_ALUC|FU_LSU1|FU_LSU2|FU_FADD|FU_FMUL|FU_FCVT},
    {OP_mov,             FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    // Logical
    {OP_and,             FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    {OP_andnot,          FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    {OP_xor,             FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    {OP_or,              FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    {OP_nand,            FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    {OP_ornot,           FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    {OP_eqv,             FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    {OP_nor,             FU_ALU1|FU_ALU2|FU_ALU3|FU_FADD|FU_FMUL},
    // Mask, insert or extract bytes
    {OP_maskb,           FU_ALU1|FU_ALU2|FU_ALU3},
    // Add and subtract
    {OP_add,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_sub,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_adda,            FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_suba,            FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_addm,            FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_subm,            FU_ALU1|FU_ALU2|FU_ALU3},
    // Condition code logical ops
    {OP_andcc,           FU_ALUC},
    {OP_orcc,            FU_ALUC},
    {OP_xorcc,           FU_ALUC},
    {OP_ornotcc,         FU_ALUC},
    // Condition code movement and merging
    {OP_movccr,          FU_ALUC},
    {OP_movrcc,          FU_ALUC},
    {OP_collcc,          FU_ALUC},
    // Simple shifting (restricted to small immediate 1..8)
    {OP_shls,            FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_shrs,            FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_bswap,           FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_sars,            FU_ALU1|FU_ALU2|FU_ALU3},
    // Bit testing
    {OP_bt,              FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_bts,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_btr,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_btc,             FU_ALU1|FU_ALU2|FU_ALU3},
    // Set and select
    {OP_set,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_set_sub,         FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_set_and,         FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_sel,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_sel_cmp,         FU_ALU1|FU_ALU2|FU_ALU3},
    // Branches
    {OP_br,              FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_br_sub,          FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_br_and,          FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_jmp,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_bru,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_jmpp,            FU_ALUC},
    {OP_brp,             FU_ALUC},
    // Checks
    {OP_chk,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_chk_sub,         FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_chk_and,         FU_ALU1|FU_ALU2|FU_ALU3},
    // Loads and stores
    {OP_ld,              FU_LSU1|FU_LSU2},
    {OP_ldx,             FU_LSU1|FU_LSU2},
    {OP_ld_pre,          FU_LSU1     },
    {OP_st,              FU_LSU1|FU_LSU2},
    {OP_mf,              FU_LSU1     },
    // Shifts, rotates and complex masking
    {OP_shl,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_shr,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_mask,            FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_sar,             FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_rotl,            FU_ALU1|FU_ALU2|FU_ALU3},  
    {OP_rotr,            FU_ALU1|FU_ALU2|FU_ALU3},   
    {OP_rotcl,           FU_ALU1|FU_ALU2|FU_ALU3},
    {OP_rotcr,           FU_ALU1|FU_ALU2|FU_ALU3},  
    // Multiplication
    {OP_mull,            FU_ALUC},
    {OP_mulh,            FU_ALUC},
    {OP_mulhu,           FU_ALUC},
    {OP_mulhl,           FU_ALUC},
    // Bit scans
    {OP_ctz,             FU_ALUC},
    {OP_clz,             FU_ALUC},
    {OP_ctpop,           FU_ALUC},  
    {OP_permb,           FU_ALUC|FU_FCVT},
    // Integer divide and remainder step
    {OP_div,             FU_ALUC},
    {OP_rem,             FU_ALUC},
    {OP_divs,            FU_ALUC},
    {OP_rems,            FU_ALUC},
    // Minimum and maximum
    {OP_min,             ANYALU},
    {OP_max,             ANYALU},
    {OP_min_s,           ANYALU},
    {OP_max_s,           ANYALU},
    // Floating point
    {OP_fadd,            FU_FADD},
    {OP_fsub,            FU_FADD},
    {OP_fmul,            FU_FMUL},
    {OP_fmadd,           FU_FMUL},
    {OP_fmsub,           FU_FMUL},
    {OP_fmsubr,          FU_FMUL},
    {OP_fdiv,            FU_FMUL},
    {OP_fsqrt,           FU_FMUL},
    {OP_frcp,            FU_FMUL},
    {OP_frsqrt,          FU_FMUL},
    {OP_fmin,            FU_FADD},
    {OP_fmax,            FU_FADD},
    {OP_fcmp,            FU_FADD},
    // For fcmpcc, uop.size bits have following meaning:
    {OP_fcmpcc,          FU_FADD},
    // and/andn/or/xor are done using integer uops
    {OP_fcvt_i2s_ins,    FU_FCVT},
    {OP_fcvt_i2s_p,      FU_FCVT},
    {OP_fcvt_i2d_lo,     FU_FCVT},
    {OP_fcvt_i2d_hi,     FU_FCVT},
    {OP_fcvt_q2s_ins,    FU_FCVT},
    {OP_fcvt_q2d,        FU_FCVT},
    {OP_fcvt_s2i,        FU_FCVT},
    {OP_fcvt_s2q,        FU_FCVT},
    {OP_fcvt_s2i_p,      FU_FCVT},
    {OP_fcvt_d2i,        FU_FCVT},
    {OP_fcvt_d2q,        FU_FCVT},
    {OP_fcvt_d2i_p,      FU_FCVT},
    {OP_fcvt_d2s_ins,    FU_FCVT},
    {OP_fcvt_d2s_p,      FU_FCVT},
    {OP_fcvt_s2d_lo,     FU_FCVT},
    {OP_fcvt_s2d_hi,     FU_FCVT},
    // Vector integer uops
    {OP_vadd,            FU_FADD|FU_FMUL},
    {OP_vsub,            FU_FADD|FU_FMUL},
    {OP_vadd_us,         FU_FADD|FU_FMUL},
    {OP_vsub_us,         FU_FADD|FU_FMUL},
    {OP_vadd_ss,         FU_FADD|FU_FMUL},
    {OP_vsub_ss,         FU_FADD|FU_FMUL},
    {OP_vshl,            FU_FMUL},
    {OP_vshr,            FU_FMUL},
    {OP_vbt,             FU_FMUL},
    {OP_vsar,            FU_FMUL},
    {OP_vavg,            FU_FADD},
    {OP_vcmp,            FU_FADD|FU_FMUL},
    {OP_vmin,            FU_FADD|FU_FMUL},
    {OP_vmax,            FU_FADD|FU_FMUL},
    {OP_vmin_s,          FU_FADD|FU_FMUL},
    {OP_vmax_s,          FU_FADD|FU_FMUL},
    {OP_vmull,           FU_FMUL},
    {OP_vmulh,           FU_FMUL},
    {OP_vmulhu,          FU_FMUL},
    {OP_vmaddp,          ANYFPU},
    {OP_vsad,            ANYFPU},
    {OP_vpack_us,        ANYFPU},
    {OP_vpack_ss,        ANYFPU},
};

#endif

#if 0

//
// GEMS functional unit
//
enum fu_type_t {
    FU_NONE = 0,             // inst does not use a functional unit
    FU_INTALU,               // integer ALU
    FU_INTMULT,              // integer multiplier
    FU_INTDIV,               // integer divider
    FU_BRANCH,               // compare / branch unit
    FU_FLOATADD,             // floating point adder/subtractor
    FU_FLOATCMP,             // floating point comparator
    FU_FLOATCVT,             // floating point<->integer converter
    FU_FLOATMULT,            // floating point multiplier
    FU_FLOATDIV,             // floating point divider
    FU_FLOATSQRT,            // floating point square root
    FU_RDPORT,               // memory read port
    FU_WRPORT,               // memory write port
    FU_NUM_FU_TYPES          // total functional unit classes
};

#else

/*------------------------------------------------------------------------*/
/* Macro declarations                                                     */
/*------------------------------------------------------------------------*/

/// i_opcode: one opcode for each decoded sparc instruction
enum i_opcode {
  i_add = 0,
  i_addcc,
  i_addc,
  i_addccc,
  i_and,
  i_andcc,
  i_andn,
  i_andncc,
  i_fba,
  i_ba,
  i_fbpa,
  i_bpa,
  i_fbn,
  i_fbpn,
  i_bn,
  i_bpn,
  i_bpne,
  i_bpe,
  i_bpg,
  i_bple,
  i_bpge,
  i_bpl,
  i_bpgu,
  i_bpleu,
  i_bpcc,
  i_bpcs,
  i_bppos,
  i_bpneg,
  i_bpvc,
  i_bpvs,
  i_call,
  i_casa,
  i_casxa,
  i_done,
  i_jmpl,
  i_fabss,
  i_fabsd,
  i_fabsq,
  i_fadds,
  i_faddd,
  i_faddq,
  i_fsubs,
  i_fsubd,
  i_fsubq,
  i_fcmps,
  i_fcmpd,
  i_fcmpq,
  i_fcmpes,
  i_fcmped,
  i_fcmpeq,
  i_fmovs,
  i_fmovd,
  i_fmovq,
  i_fnegs,
  i_fnegd,
  i_fnegq,
  i_fmuls,
  i_fmuld,
  i_fmulq,
  i_fdivs,
  i_fdivd,
  i_fdivq,
  i_fsmuld,
  i_fdmulq,
  i_fsqrts,
  i_fsqrtd,
  i_fsqrtq,
  i_retrn,
  i_brz,
  i_brlez,
  i_brlz,
  i_brnz,
  i_brgz,
  i_brgez,
  i_fbu,
  i_fbg,
  i_fbug,
  i_fbl,
  i_fbul,
  i_fblg,
  i_fbne,
  i_fbe,
  i_fbue,
  i_fbge,
  i_fbuge,
  i_fble,
  i_fbule,
  i_fbo,
  i_fbpu,
  i_fbpg,
  i_fbpug,
  i_fbpl,
  i_fbpul,
  i_fbplg,
  i_fbpne,
  i_fbpe,
  i_fbpue,
  i_fbpge,
  i_fbpuge,
  i_fbple,
  i_fbpule,
  i_fbpo,
  i_bne,
  i_be,
  i_bg,
  i_ble,
  i_bge,
  i_bl,
  i_bgu,
  i_bleu,
  i_bcc,
  i_bcs,
  i_bpos,
  i_bneg,
  i_bvc,
  i_bvs,
  i_fstox,
  i_fdtox,
  i_fqtox,
  i_fstoi,
  i_fdtoi,
  i_fqtoi,
  i_fstod,
  i_fstoq,
  i_fdtos,
  i_fdtoq,
  i_fqtos,
  i_fqtod,
  i_fxtos,
  i_fxtod,
  i_fxtoq,
  i_fitos,
  i_fitod,
  i_fitoq,
  i_fmovfsn,
  i_fmovfsne,
  i_fmovfslg,
  i_fmovfsul,
  i_fmovfsl,
  i_fmovfsug,
  i_fmovfsg,
  i_fmovfsu,
  i_fmovfsa,
  i_fmovfse,
  i_fmovfsue,
  i_fmovfsge,
  i_fmovfsuge,
  i_fmovfsle,
  i_fmovfsule,
  i_fmovfso,
  i_fmovfdn,
  i_fmovfdne,
  i_fmovfdlg,
  i_fmovfdul,
  i_fmovfdl,
  i_fmovfdug,
  i_fmovfdg,
  i_fmovfdu,
  i_fmovfda,
  i_fmovfde,
  i_fmovfdue,
  i_fmovfdge,
  i_fmovfduge,
  i_fmovfdle,
  i_fmovfdule,
  i_fmovfdo,
  i_fmovfqn,
  i_fmovfqne,
  i_fmovfqlg,
  i_fmovfqul,
  i_fmovfql,
  i_fmovfqug,
  i_fmovfqg,
  i_fmovfqu,
  i_fmovfqa,
  i_fmovfqe,
  i_fmovfque,
  i_fmovfqge,
  i_fmovfquge,
  i_fmovfqle,
  i_fmovfqule,
  i_fmovfqo,
  i_fmovsn,
  i_fmovse,
  i_fmovsle,
  i_fmovsl,
  i_fmovsleu,
  i_fmovscs,
  i_fmovsneg,
  i_fmovsvs,
  i_fmovsa,
  i_fmovsne,
  i_fmovsg,
  i_fmovsge,
  i_fmovsgu,
  i_fmovscc,
  i_fmovspos,
  i_fmovsvc,
  i_fmovdn,
  i_fmovde,
  i_fmovdle,
  i_fmovdl,
  i_fmovdleu,
  i_fmovdcs,
  i_fmovdneg,
  i_fmovdvs,
  i_fmovda,
  i_fmovdne,
  i_fmovdg,
  i_fmovdge,
  i_fmovdgu,
  i_fmovdcc,
  i_fmovdpos,
  i_fmovdvc,
  i_fmovqn,
  i_fmovqe,
  i_fmovqle,
  i_fmovql,
  i_fmovqleu,
  i_fmovqcs,
  i_fmovqneg,
  i_fmovqvs,
  i_fmovqa,
  i_fmovqne,
  i_fmovqg,
  i_fmovqge,
  i_fmovqgu,
  i_fmovqcc,
  i_fmovqpos,
  i_fmovqvc,
  i_fmovrsz,
  i_fmovrslez,
  i_fmovrslz,
  i_fmovrsnz,
  i_fmovrsgz,
  i_fmovrsgez,
  i_fmovrdz,
  i_fmovrdlez,
  i_fmovrdlz,
  i_fmovrdnz,
  i_fmovrdgz,
  i_fmovrdgez,
  i_fmovrqz,
  i_fmovrqlez,
  i_fmovrqlz,
  i_fmovrqnz,
  i_fmovrqgz,
  i_fmovrqgez,
  i_mova,
  i_movfa,
  i_movn,
  i_movfn,
  i_movne,
  i_move,
  i_movg,
  i_movle,
  i_movge,
  i_movl,
  i_movgu,
  i_movleu,
  i_movcc,
  i_movcs,
  i_movpos,
  i_movneg,
  i_movvc,
  i_movvs,
  i_movfu,
  i_movfg,
  i_movfug,
  i_movfl,
  i_movful,
  i_movflg,
  i_movfne,
  i_movfe,
  i_movfue,
  i_movfge,
  i_movfuge,
  i_movfle,
  i_movfule,
  i_movfo,
  i_movrz,
  i_movrlez,
  i_movrlz,
  i_movrnz,
  i_movrgz,
  i_movrgez,
  i_ta,
  i_tn,
  i_tne,
  i_te,
  i_tg,
  i_tle,
  i_tge,
  i_tl,
  i_tgu,
  i_tleu,
  i_tcc,
  i_tcs,
  i_tpos,
  i_tneg,
  i_tvc,
  i_tvs,
  i_sub,
  i_subcc,
  i_subc,
  i_subccc,
  i_or,
  i_orcc,
  i_orn,
  i_orncc,
  i_xor,
  i_xorcc,
  i_xnor,
  i_xnorcc,
  i_mulx,
  i_sdivx,
  i_udivx,
  i_sll,
  i_srl,
  i_sra,
  i_sllx,
  i_srlx,
  i_srax,
  i_taddcc,
  i_taddcctv,
  i_tsubcc,
  i_tsubcctv,
  i_udiv,
  i_sdiv,
  i_umul,
  i_smul,
  i_udivcc,
  i_sdivcc,
  i_umulcc,
  i_smulcc,
  i_mulscc,
  i_popc,
  i_flush,
  i_flushw,
  i_rd,
  i_rdcc,
  i_wr,
  i_wrcc,
  i_save,
  i_restore,
  i_saved,
  i_restored,
  i_sethi,
  i_ldf,
  i_lddf,
  i_ldqf,
  i_ldfa,
  i_lddfa,
  i_ldblk,
  i_ldqfa,
  i_ldsb,
  i_ldsh,
  i_ldsw,
  i_ldub,
  i_lduh,
  i_lduw,
  i_ldx,
  i_ldd,
  i_ldsba,
  i_ldsha,
  i_ldswa,
  i_lduba,
  i_lduha,
  i_lduwa,
  i_ldxa,
  i_ldda,
  i_ldqa,
  i_stf,
  i_stdf,
  i_stqf,
  i_stb,
  i_sth,
  i_stw,
  i_stx,
  i_std,
  i_stfa,
  i_stdfa,
  i_stblk,
  i_stqfa,
  i_stba,
  i_stha,
  i_stwa,
  i_stxa,
  i_stda,
  i_ldstub,
  i_ldstuba,
  i_prefetch,
  i_prefetcha,
  i_swap,
  i_swapa,
  i_ldfsr,
  i_ldxfsr,
  i_stfsr,
  i_stxfsr,
  i__trap,  /* ?? not a real instr */
  i_impdep1,
  i_impdep2,
  i_membar,
  i_stbar,
  i_cmp,
  i_jmp,
  i_mov,
  i_nop,
  i_not,
  i_rdpr,
  i_wrpr,
  i_faligndata,
  i_alignaddr,
  i_alignaddrl,
  i_fzero,
  i_fzeros,
  i_fsrc1,
  i_retry,
  i_fcmple16,
  i_fcmpne16,
  i_fcmple32,
  i_fcmpne32,
  i_fcmpgt16,
  i_fcmpeq16,
  i_fcmpgt32,
  i_fcmpeq32,
  i_bshuffle,
  i_bmask,
  i_mop,
  i_ill,
  i_maxcount
};

#define FU_NONE      i_nop              // inst does not use a functional unit
#define FU_INTALU    i_add              // integer ALU
#define FU_INTMULT   i_mulx             // integer multiplier
#define FU_INTDIV    i_udivx            // integer divider
#define FU_BRANCH    i_bpn              // compare / branch unit
#define FU_FLOATADD  i_fadds            // floating point adder/subtractor
#define FU_FLOATCMP  i_fcmps            // floating point comparator
#define FU_FLOATCVT  i_fstox            // floating point<->integer converter
#define FU_FLOATMULT i_fmuls            // floating point multiplier
#define FU_FLOATDIV  i_fdivs            // floating point divider
#define FU_FLOATSQRT i_fsqrts           // floating point square root
#define FU_RDPORT    i_lduw             // memory read port
#define FU_WRPORT    i_stw              // memory write port

#endif

static const func_info_t gems_func_map_table[OP_MAX_OPCODE] = {
    {OP_nop,             FU_NONE},
    {OP_mov,             FU_NONE},
    // Logical
    {OP_and,             FU_INTALU},
    {OP_andnot,          FU_INTALU},
    {OP_xor,             FU_INTALU},
    {OP_or,              FU_INTALU},
    {OP_nand,            FU_INTALU},
    {OP_ornot,           FU_INTALU},
    {OP_eqv,             FU_INTALU},
    {OP_nor,             FU_INTALU},
    // Mask, insert or extract bytes
    {OP_maskb,           FU_INTALU},
    // Add and subtract
    {OP_add,             FU_INTALU},
    {OP_sub,             FU_INTALU},
    {OP_adda,            FU_INTALU},
    {OP_suba,            FU_INTALU},
    {OP_addm,            FU_INTALU},
    {OP_subm,            FU_INTALU},
    // Condition code logical ops
    {OP_andcc,           FU_INTALU},
    {OP_orcc,            FU_INTALU},
    {OP_xorcc,           FU_INTALU},
    {OP_ornotcc,         FU_INTALU},
    // Condition code movement and merging
    {OP_movccr,          FU_NONE},
    {OP_movrcc,          FU_NONE},
    {OP_collcc,          FU_NONE},
    // Simple shifting (restricted to small immediate 1..8)
    {OP_shls,            FU_INTALU},
    {OP_shrs,            FU_INTALU},
    {OP_bswap,           FU_INTALU},
    {OP_sars,            FU_INTALU},
    // Bit testing
    {OP_bt,              FU_INTALU},
    {OP_bts,             FU_INTALU},
    {OP_btr,             FU_INTALU},
    {OP_btc,             FU_INTALU},
    // Set and select
    {OP_set,             FU_INTALU},
    {OP_set_sub,         FU_INTALU},
    {OP_set_and,         FU_INTALU},
    {OP_sel,             FU_INTALU},
    {OP_sel_cmp,         FU_INTALU},
    // Branches
    {OP_br,              FU_BRANCH},
    {OP_br_sub,          FU_BRANCH},
    {OP_br_and,          FU_BRANCH},
    {OP_jmp,             FU_BRANCH},
    {OP_bru,             FU_BRANCH},
    {OP_jmpp,            FU_BRANCH},
    {OP_brp,             FU_BRANCH},
    // Checks
    {OP_chk,             FU_INTALU},
    {OP_chk_sub,         FU_INTALU},
    {OP_chk_and,         FU_INTALU},
    // Loads and stores
    {OP_ld,              FU_RDPORT},
    {OP_ldx,             FU_RDPORT},
    {OP_ld_pre,          FU_RDPORT},
    {OP_st,              FU_WRPORT},
    {OP_mf,              FU_WRPORT},
    // Shifts, rotates and complex masking
    {OP_shl,             FU_INTALU},
    {OP_shr,             FU_INTALU},
    {OP_mask,            FU_INTALU},
    {OP_sar,             FU_INTALU},
    {OP_rotl,            FU_INTALU},
    {OP_rotr,            FU_INTALU},
    {OP_rotcl,           FU_INTALU},
    {OP_rotcr,           FU_INTALU},
    // Multiplication
    {OP_mull,            FU_INTMULT},
    {OP_mulh,            FU_INTMULT},
    {OP_mulhu,           FU_INTMULT},
    {OP_mulhl,           FU_INTMULT},
    // Bit scans
    {OP_ctz,             FU_INTALU},
    {OP_clz,             FU_INTALU},
    {OP_ctpop,           FU_INTALU},  
    {OP_permb,           FU_FLOATCVT},
    // Integer divide and remainder step
    {OP_div,             FU_INTDIV},
    {OP_rem,             FU_INTDIV},
    {OP_divs,            FU_INTDIV},
    {OP_rems,            FU_INTDIV},
    // Minimum and maximum
    {OP_min,             FU_INTALU},
    {OP_max,             FU_INTALU},
    {OP_min_s,           FU_INTALU},
    {OP_max_s,           FU_INTALU},
    // Floating point
    {OP_fadd,            FU_FLOATADD},
    {OP_fsub,            FU_FLOATADD},
    {OP_fmul,            FU_FLOATMULT},
    {OP_fmadd,           FU_FLOATMULT},
    {OP_fmsub,           FU_FLOATMULT},
    {OP_fmsubr,          FU_FLOATMULT},
    {OP_fdiv,            FU_FLOATDIV},
    {OP_fsqrt,           FU_FLOATSQRT},
    {OP_frcp,            FU_FLOATMULT},
    {OP_frsqrt,          FU_FLOATSQRT},
    {OP_fmin,            FU_FLOATADD},
    {OP_fmax,            FU_FLOATADD},
    {OP_fcmp,            FU_FLOATCMP},
    // For fcmpcc, uop.size bits have following meaning:
    {OP_fcmpcc,          FU_FLOATCMP},
    // and/andn/or/xor are done using integer uops
    {OP_fcvt_i2s_ins,    FU_FLOATCVT},
    {OP_fcvt_i2s_p,      FU_FLOATCVT},
    {OP_fcvt_i2d_lo,     FU_FLOATCVT},
    {OP_fcvt_i2d_hi,     FU_FLOATCVT},
    {OP_fcvt_q2s_ins,    FU_FLOATCVT},
    {OP_fcvt_q2d,        FU_FLOATCVT},
    {OP_fcvt_s2i,        FU_FLOATCVT},
    {OP_fcvt_s2q,        FU_FLOATCVT},
    {OP_fcvt_s2i_p,      FU_FLOATCVT},
    {OP_fcvt_d2i,        FU_FLOATCVT},
    {OP_fcvt_d2q,        FU_FLOATCVT},
    {OP_fcvt_d2i_p,      FU_FLOATCVT},
    {OP_fcvt_d2s_ins,    FU_FLOATCVT},
    {OP_fcvt_d2s_p,      FU_FLOATCVT},
    {OP_fcvt_s2d_lo,     FU_FLOATCVT},
    {OP_fcvt_s2d_hi,     FU_FLOATCVT},
    // Vector integer uops
    {OP_vadd,            FU_FLOATADD},
    {OP_vsub,            FU_FLOATADD},
    {OP_vadd_us,         FU_FLOATADD},
    {OP_vsub_us,         FU_FLOATADD},
    {OP_vadd_ss,         FU_FLOATADD},
    {OP_vsub_ss,         FU_FLOATADD},
    {OP_vshl,            FU_FLOATMULT},
    {OP_vshr,            FU_FLOATMULT},
    {OP_vbt,             FU_FLOATMULT},
    {OP_vsar,            FU_FLOATMULT},
    {OP_vavg,            FU_FLOATADD},
    {OP_vcmp,            FU_FLOATCMP},
    {OP_vmin,            FU_FLOATADD},
    {OP_vmax,            FU_FLOATADD},
    {OP_vmin_s,          FU_FLOATADD},
    {OP_vmax_s,          FU_FLOATADD},
    {OP_vmull,           FU_FLOATMULT},
    {OP_vmulh,           FU_FLOATMULT},
    {OP_vmulhu,          FU_FLOATMULT},
    {OP_vmaddp,          FU_FLOATADD},
    {OP_vsad,            FU_FLOATADD},
    {OP_vpack_us,        FU_FLOATADD},
    {OP_vpack_ss,        FU_FLOATADD},
};

//#define TRIFS_TRACE_UOPS_MAP_TABLE

#endif  /* DECODE_H */
